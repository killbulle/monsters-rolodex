{"version":3,"sources":["components/card/card.tsx","components/card-list/card-list.tsx","components/searchbox/searchbox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","console","log","className","alt","src","monster","id","key","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","state","search","handle","evt","target","value","setState","stateold","fetch","then","resp","json","users","this","monstersfiltered","filter","m","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6UASaA,G,kBAAO,SAACC,GAEnB,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BL,EAAMM,QAAQC,GAAxC,4BAEL,wBAAIC,IAAKR,EAAMQ,KAAMR,EAAMM,QAAQG,MACnC,8BAAOT,EAAMM,QAAQI,UCCZC,EAVS,SAACX,GAEvB,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,aACZH,EAAMY,SAASC,KAAI,SAACP,GACnB,OAAO,kBAAC,EAAD,CAAME,IAAKF,EAAQC,GAAID,QAASA,SCNlCQ,G,MAAY,SAACd,GACxB,OACE,2BACEG,UAAU,SACVY,KAAK,SACLC,YAAahB,EAAMgB,YACnBC,SAAUjB,EAAMkB,iBC8BPC,E,4MArCbC,MAAkB,CAChBR,SAAU,GACVS,OAAQ,I,EA2BVC,OAAS,SAACC,GACR,IAAMF,EAASE,EAAIC,OAAOC,MAC1B,OAAO,EAAKC,UAAS,SAACC,GACpB,MAAO,CAAEN,OAAQA,O,kEA3BM,IAAD,OACAO,MAAM,8CAC3BC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACL,EAAKN,SAAS,CACZd,SAAUoB,S,+BAKH,IAAD,EACiBC,KAAKb,MAA1BR,EADI,EACJA,SAAUS,EADN,EACMA,OACZa,EAAmBtB,EAASuB,QAAO,SAACC,GAAD,OACvCA,EAAE3B,KAAK4B,cAAcC,SAASjB,EAAOgB,kBAEvC,OACE,yBAAKlC,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWa,YAAY,kBAAkBE,aAAce,KAAKX,SAC5D,kBAAC,EAAD,CAAUV,SAAUsB,S,GAzBVK,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.e09c4083.chunk.js","sourcesContent":["import React from 'react';\nimport { Monster } from '../../Monster';\nimport './card.css';\n\ntype CardProps = {\n  key: string;\n  monster: Monster;\n};\n\nexport const Card = (props: CardProps) => {\n  console.log(props);\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h1 key={props.key}>{props.monster.name}</h1>\n      <text>{props.monster.email}</text>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Monster } from '../../Monster';\nimport './card-list.css';\nimport { Card } from '../card/card';\n\ntype CardListProps = {\n  monsters: Monster[];\n};\n\nexport const CardList = (props: CardListProps) => {\n  console.log(props);\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster: Monster) => {\n        return <Card key={monster.id} monster={monster}></Card>;\n      })}\n    </div>\n  );\n};\nexport default CardList;\n\n// class Cardlist extends React.Component<{}, {}> {\n//   state = {\n//     monsters: [],\n//   };\n//\n//   componentDidMount(): void {\n//     const responsePromise = fetch('https://jsonplaceholder.typicode.com/users')\n//       .then((resp) => resp.json())\n//       .then((users) => {\n//         this.setState({\n//           monsters: users,\n//         });\n//       });\n//   }\n//\n//   render() {\n//     return (\n//       <div className=\"Cardlist\">\n//         {this.state.monsters.map((monster: Monster) => {\n//           return <h1 key={monster.id}>{monster.name}</h1>;\n//         })}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Cardlist;\n","import React from 'react';\n\nimport './searchbox.css';\n\ntype SearchProps = {\n  placeholder: string;\n  handleChange: (evt: React.ChangeEvent<HTMLInputElement>) => void;\n};\nexport const SearchBox = (props: SearchProps) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={props.placeholder}\n      onChange={props.handleChange}\n    />\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { AppState } from './AppState';\nimport CardList from './components/card-list/card-list';\nimport { SearchBox } from './components/searchbox/searchbox';\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    monsters: [],\n    search: '',\n  };\n\n  componentDidMount(): void {\n    const responsePromise = fetch('https://jsonplaceholder.typicode.com/users')\n      .then((resp) => resp.json())\n      .then((users) => {\n        this.setState({\n          monsters: users,\n        });\n      });\n  }\n\n  render(): any {\n    const { monsters, search } = this.state;\n    const monstersfiltered = monsters.filter((m) =>\n      m.name.toLowerCase().includes(search.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monster rollodex</h1>\n        <SearchBox placeholder=\"search monsters\" handleChange={this.handle} />\n        <CardList monsters={monstersfiltered} />\n      </div>\n    );\n  }\n\n  handle = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const search = evt.target.value;\n    return this.setState((stateold) => {\n      return { search: search };\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}